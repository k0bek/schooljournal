generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MemberType {
  teacher
  student
  null
}

enum AuthType {
  google
  register
}

model User {
  id               String     @id @default(uuid()) @map("_id")
  username         String
  firstName        String
  lastName         String
  email            String     @unique
  password         String
  imageUrl         String?
  type             MemberType @default(null)
  verified         Boolean    @default(false)
  authType         AuthType
  tokens           Token[]
  teacher Teacher?
  student Student?
  messagesInitiated Message[] @relation("MemberOne")
  messagesReceived Message[] @relation("MemberTwo")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Teacher {
  id               String   @id @default(uuid()) @map("_id")
  user             User @relation(fields: [userId], references: [id])
  userId           String @unique
  createdClass Class[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}
model Student {
  id               String     @id @default(uuid()) @map("_id")
  user User @relation(fields: [userId], references: [id])
  userId           String @unique
  class Class @relation(fields: [userId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Token {
  id           String   @id @default(uuid()) @map("_id")
  userId       String
  refreshToken String
  isValid      Boolean
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Class {
  id               String     @id @default(uuid()) @map("_id")
  className        String     @unique
  numberOfStudents Int
  subjects         String[]
  formTeacherId String
  formTeacher Teacher @relation(fields: [formTeacherId], references: [userId])
  students Student[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Message{
  id               String     @id @default(uuid()) @map("_id")
  text String
  memberOneId String
  memberOne User @relation("MemberOne", fields: [memberOneId], references: [id])
  memberTwoId String
  memberTwo User @relation("MemberTwo", fields: [memberTwoId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}