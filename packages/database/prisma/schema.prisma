generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MemberType {
  teacher
  student
  null
}

enum AuthType {
  google
  register
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  firstName        String
  lastName         String
  email            String     @unique
  password         String
  imageUrl         String?
  type             MemberType @default(null)
  verified         Boolean    @default(false)
  authType         AuthType
  tokens           Token[]
  teacher Teacher?
  student Student?
  messagesInitiated Message[] @relation("MemberOne")
  messagesReceived Message[] @relation("MemberTwo")
  notificationsInitiated Notification[] @relation("MemberOne")
  notificationssReceived Notification[] @relation("MemberTwo")
  initialized Boolean @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Teacher {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  user             User @relation(fields: [userId], references: [id])
  userId           String @unique @db.ObjectId
  createdClass Class[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}
model Student {
    id               String     @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId           String @unique @db.ObjectId
  classIDs String[]   @db.ObjectId
  classId String? @unique @db.ObjectId
  class Class? @relation("currentClass", fields: [classId], references: [id]) 
  requestedClasses Class[] @relation("requested",fields: [classIDs], references: [id])
  subjects Subject[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Token {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  refreshToken String
  isValid      Boolean
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Class {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  className        String     @unique
  numberOfStudents Int
  subjects         Subject[]
  formTeacherId String @db.ObjectId
  formTeacher Teacher @relation(fields: [formTeacherId], references: [userId])
  studentIDs String[]   @db.ObjectId
  requestedStudents Student[] @relation("requested", fields: [studentIDs], references: [id])
  students Student[] @relation("currentClass")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Message{
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  text String
  memberOneId String @db.ObjectId
  memberOne User @relation("MemberOne", fields: [memberOneId], references: [id])
  memberTwoId String? @db.ObjectId
  memberTwo User? @relation("MemberTwo", fields: [memberTwoId], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Notification{
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  text String
  memberOneId String @db.ObjectId
  memberOne User @relation("MemberOne", fields: [memberOneId], references: [id])
  memberTwoId String @db.ObjectId
  memberTwo User @relation("MemberTwo", fields: [memberTwoId], references: [id])
  url String
  readed Boolean @default(false)
 createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Subject{
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  classId String @db.ObjectId
  userId String? @db.ObjectId
  subjectName String
  student Student? @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [id])
  grades Grade[]
}

model Grade{
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId String @db.ObjectId
  subjectId String @db.ObjectId
  topic String
  grade Int
  subject Subject @relation(fields: [subjectId], references: [id])
}